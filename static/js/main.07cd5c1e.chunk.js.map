{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","currentPage","pageQuantity","toNextPage","toPrevPage","onPageChange","pagesArr","className","classNames","disabled","href","onClick","map","page","hide","active","selectOptions","App","useState","total","setTotal","perPage","setPerPage","setCurrentPage","Math","ceil","startItemsRange","endItemsRange","itemsArr","id","value","onChange","e","target","htmlFor","type","min","prevState","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07cd5c1e.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport './Pagination.css';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  currentPage: number,\n  pageQuantity: number,\n  toNextPage: () => void;\n  toPrevPage: () => void;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  currentPage,\n  pageQuantity,\n  toNextPage,\n  toPrevPage,\n  onPageChange,\n}) => {\n  const pagesArr = getNumbers(1, pageQuantity);\n\n  return (\n    <ul className=\"pagination\">\n      <li className={\n        classNames('page-item', { disabled: currentPage === 1 })\n      }\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={toPrevPage}\n        >\n          «\n        </a>\n      </li>\n      {pagesArr.map(page => (\n        <>\n          <li className=\"page-item\" key={page}>\n            <a\n              href={`#${page}`}\n              className={classNames('page-link',\n                {\n                  hide: page === 1\n                  || page === currentPage\n                  || page === currentPage + 1\n                  || page > currentPage + 2\n                  || page < currentPage - 1\n                  || page === pageQuantity,\n                })}\n            >\n              ...\n            </a>\n          </li>\n\n          <li\n            key={page}\n            className={classNames('page-item',\n              { active: page === currentPage })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className={classNames('page-link',\n                {\n                  hide: page !== 1\n                  && page !== currentPage\n                  && page !== currentPage + 1\n                  && page !== currentPage - 1\n                  && page < pageQuantity,\n                })}\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        </>\n      ))}\n      <li className={\n        classNames('page-item',\n          { disabled: currentPage === pageQuantity })\n      }\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === pageQuantity}\n          onClick={toNextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst selectOptions = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [total, setTotal] = useState(42);\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const pageQuantity = Math.ceil(total / perPage);\n  const startItemsRange = perPage * (currentPage - 1) + 1;\n  const endItemsRange = pageQuantity === currentPage\n    ? total\n    : currentPage * perPage;\n\n  const itemsArr = getNumbers(startItemsRange, endItemsRange);\n\n  const perPageChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+e.target.value);\n    setCurrentPage(1);\n  };\n\n  const toNextPage = () => {\n    if (currentPage < pageQuantity) {\n      setCurrentPage(prevState => prevState + 1);\n    }\n  };\n\n  const toPrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prevState => prevState - 1);\n    }\n  };\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const totalHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTotal(+e.target.value);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>{`${total} Items with Pagination`}</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItemsRange} - ${endItemsRange} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={perPageChangeHandler}\n          >\n            {selectOptions.map(value => (\n              <option key={value} value={value}>{value}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <input\n            type=\"number\"\n            id=\"total\"\n            min={1}\n            className=\"form-control\"\n            value={total}\n            onChange={totalHandler}\n          />\n        </div>\n\n        <label htmlFor=\"total\" className=\"col-form-label col\">\n          total number of pages (can be changed)\n        </label>\n      </div>\n      <Pagination\n        currentPage={currentPage}\n        pageQuantity={pageQuantity}\n        toNextPage={toNextPage}\n        toPrevPage={toPrevPage}\n        onPageChange={onPageChange}\n      />\n      <ul>\n        {itemsArr.map(item => (\n          <li key={item} data-cy=\"item\">{`Item ${item}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}